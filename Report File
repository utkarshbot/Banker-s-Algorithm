Student Name: Utkarsh Rathore
Student ID: 11802819
Email Address: utkarshrathore161999@gmail.com
GitHub Link: https://github.com/utkarshbot/Banker-s-Algorithm
Code:

#include <stdio.h> 
int main() 
{ 
    // P0, P1, P2, P3, P4 are the Process names here 
  
    int n, m, i, j, k; 
    n = 5; // Number of processes 
    m = 3; // Number of resources 
    int alloc[5][3] = { { 0, 1, 0 }, // P0    // Allocation Matrix 
                        { 2, 0, 0 }, // P1 
                        { 3, 0, 2 }, // P2 
                        { 2, 1, 1 }, // P3 
                        { 0, 0, 2 } }; // P4 
  
    int max[5][3] = { { 7, 5, 3 }, // P0    // MAX Matrix 
                      { 3, 2, 2 }, // P1 
                      { 9, 0, 2 }, // P2 
                      { 2, 2, 2 }, // P3 
                      { 4, 3, 3 } }; // P4 
  
    int avail[3] = { 3, 3, 2 }; // Available Resources 
  
    int f[n], ans[n], ind = 0; 
    for (k = 0; k < n; k++) { 
        f[k] = 0; 
    } 
    int need[n][m]; 
    for (i = 0; i < n; i++) { 
        for (j = 0; j < m; j++) 
            need[i][j] = max[i][j] - alloc[i][j]; 
    } 
    int y = 0; 
    for (k = 0; k < 5; k++) { 
        for (i = 0; i < n; i++) { 
            if (f[i] == 0) { 
  
                int flag = 0; 
                for (j = 0; j < m; j++) { 
                    if (need[i][j] > avail[j]){ 
                        flag = 1; 
                         break; 
                    } 
                } 
  
                if (flag == 0) { 
                    ans[ind++] = i; 
                    for (y = 0; y < m; y++) 
                        avail[y] += alloc[i][y]; 
                    f[i] = 1; 
                } 
            } 
        } 
    } 
  
    printf("Following is the SAFE Sequence\n"); 
    for (i = 0; i < n - 1; i++) 
        printf(" P%d ->", ans[i]); 
    printf(" P%d", ans[n - 1]); 
  
    return (0);  
} 

Description:
1.	Check that Request  Available that is, (1, 0, 2)  (3, 3, 2)  true.
Available	Processes	Allocation	Max
A	B	C		A	B	C	A	B	C
3	3	2	P0	0	1	0	7	5	3
	P1	2	0	0	3	2	2
	P2	3	0	2	9	0	2
	P3	2	1	1	2	2	2
	P4	0	0	2	4	3	3

2.	Executing safety algorithm shows that sequence P1 , P3 , P4 , P0 , P2  satisfies safety requirement.
3.	Can request for (3,3,0) by P4 be granted?
4.	Can request for (0,2,0) by P0 be granted?

Algorithm:
Safety Algorithm:
1) Let Work and Finish be vectors of length ‘m’ and ‘n’ respectively.
Initialize: Work = Available
Finish[i] = false; for i=1, 2, 3, 4….n
2) Find an i such that both
a) Finish[i] = false
b) Needi <= Work
if no such i exists goto step (4)
3) Work = Work + Allocation[i]
Finish[i] = true
goto step (2)
4) if Finish [i] = true for all i
then the system is in a safe state

Resource-Request Algorithm:
Let Requesti be the request array for process Pi. Requesti [j] = k means process Pi wants k instances of resource type Rj. When a request for resources is made by process Pi, the following actions are taken:
1) If Requesti <= Needi
Goto step (2) ; otherwise, raise an error condition, since the process has exceeded its maximum claim.
2) If Requesti <= Available
Goto step (3); otherwise, Pi must wait, since the resources are not available.
3) Have the system pretend to have allocated the requested resources to process Pi by modifying the state as follows:


Available = Available – Requesti
Allocationi = Allocationi + Requesti
Needi = Needi– Requesti
Available	Processes	Allocation	Max
A	B	C		A	B	C	A	B	C
3	3	2	P0	0	1	0	7	5	3
	P1	2	0	0	3	2	2
	P2	3	0	2	9	0	2
	P3	2	1	1	2	2	2
	P4	0	0	2	4	3	3

What will be the content of the Need matrix?

Need [i, j] = Max [i, j] – Allocation [i, j]
So, the content of Need Matrix is:

Processes	Max		
	A	B	C
P0	7	5	3
P1	3	2	2
P2	9	0	2
P3	2	2	2
P4	4	3	3


Calculate complexity of implemented algorithm. (Student must specify complexity of each line of code along with overall complexity) 
Description: The time complexity of the Banker's algorithm as a function of the number n of processes and m of resources is o(n*n*m). 

If you have implemented any additional algorithm to support the solution, explain the need and usage of the same.   
Description: 
Resource-request Algorithm 
Let Requesti be the request array for process Pi. Requesti [j] = k means process Pi wants k instances of resource type Rj. When a request for resources is made by process Pi, the following actions are taken:
1) If Requesti <= Needi
Goto step (2) ; 
otherwise, raise an error condition, since the process has exceeded its maximum claim.
2) If Requesti <= Available
Goto step (3); 
otherwise, Pi must wait, since the resources are not available.
3) Have the system pretend to have allocated the requested resources to process Pi by modifying the state as
follows:
               Available = Available – Requesti
               Allocationi = Allocationi + Requesti
               Needi = Needi– Requesti
Explain the boundary conditions off the implemented code. 
 Description: The Banker algorithm, sometimes referred to as the detection algorithm,
 is a resource allocation and deadlock avoidance algorithm developed by Dijkstra that
 tests for safety by simulating the allocation of predetermined maximum possible 
amounts of all resources.
Let ‘n’ be the number of processes in the system and ‘m’ be the number of resources types.
Available : 
->It is a 1-d array of size ‘m’ indicating the number of available resources of each 
type.
->Available[ j ] = k means there are ‘k’ instances of resource type Rj
            Max :
->It is a 2-d array of size ‘n*m’ that defines the maximum demand of each process in 
a system.
->Max[ i, j ] = k means process Pi may request at most ‘k’ instances of resource 
type Rj.
Allocation :
->It is a 2-d array of size ‘n*m’ that defines the number of resources of each type 
currently allocated to each process.
->Allocation[ i, j ] = k means process Pi is currently allocated ‘k’ instances of resource type Rj
Need :
->It is a 2-d array of size ‘n*m’ that indicates the remaining resource need of each 
process.
->Need [ i,   j ] = k means process Pi currently need ‘k’ instances of resource type Rj
for its execution.
->Need [ i,   j ] = Max [ i,   j ] – Allocation [ i,   j ]
 
 
          Explain all the test cases applied on the solution of assigned problem. 
Description: The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety by simulating the allocation for predetermined maximum possible amounts of all resources, then makes an “s-state” check to test for possible activities, before deciding whether allocation should be allowed to continue.
In solution of problem different test cases are working for switch statement if you take greater or less than available if it will give you error.
 
Have you made minimum 5 revisions of solution on GitHub? 
Answer: - Yes! 
GitHub Link: https://github.com/utkarshbot/Banker-s-Algorithm







